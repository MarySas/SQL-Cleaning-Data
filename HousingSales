/* Cleaning Data in SQL

*/

SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;


SELECT SaleDateConverted
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;

Select SaleDate, CONVERT (Date, SaleDate)
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;

Update NashvilleHousing
SET SaleDateConverted = CONVERT(DATE,SaleDate);

ALTER TABLE NashvilleHousing
ADD SaleDateConverted DATE;




---- Populate Property Address Data

SELECT PropertyAddress
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing
WHERE PropertyAddress is null; -- 29 rows


SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing
WHERE PropertyAddress is null; 

SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing
--WHERE PropertyAddress is null
ORDER BY ParcelID;

SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing a
JOIN [SQL Portfolio Cleaning].dbo.NashvilleHousing b
	ON	a.ParcelID = b.ParcelID
	AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL;

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing a
JOIN [SQL Portfolio Cleaning].dbo.NashvilleHousing b
	ON	a.ParcelID = b.ParcelID
	AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL;

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress,b.PropertyAddress)
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing a
JOIN [SQL Portfolio Cleaning].dbo.NashvilleHousing b
	ON	a.ParcelID = b.ParcelID
	AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress IS NULL;


-- Breaking out Address into Individual Columns (Address, City, State)

SELECT PropertyAddress
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing
-- WHERE PropertyAddress is null
-- ORDER BY ParcelID;

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address

From [SQL Portfolio Cleaning].dbo.NashvilleHousing


ALTER TABLE NashvilleHousing
ADD PropertySplitAddress Nvarchar(255);

UPDATE NashvilleHousing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 );

ALTER TABLE NashvilleHousing
Add PropertySplitCity Nvarchar(255);

UPDATE NashvilleHousing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress));


SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;


--- Split Owner Address

SELECT
PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2)
,PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1)
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;

ALTER TABLE [SQL Portfolio Cleaning].dbo.NashvilleHousing
ADD OwnerSplitAddress Nvarchar(255);

UPDATE [SQL Portfolio Cleaning].dbo.NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 3);

ALTER TABLE [SQL Portfolio Cleaning].dbo.NashvilleHousing
ADD OwnerSplitCity Nvarchar(255);

UPDATE [SQL Portfolio Cleaning].dbo.NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 2);

ALTER TABLE [SQL Portfolio Cleaning].dbo.NashvilleHousing
ADD OwnerSplitState Nvarchar(255);

UPDATE [SQL Portfolio Cleaning].dbo.NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress, ',', '.') , 1);

SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;


--- Make column "Sold as Vacant" uniform

SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant)
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing
GROUP BY SoldAsVacant
ORDER BY 2;


SELECT SoldAsVacant
, CASE WHEN SoldAsVacant = 'Y' THEN 'Yes'
	   WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;

UPDATE [SQL Portfolio Cleaning].dbo.NashvilleHousing
SET SoldAsVacant = CASE 
	   WHEN SoldAsVacant = 'Y' THEN 'Yes'
	   WHEN SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END;

SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;



----- Remove Duplicates

WITH RowNumCTE AS(
SELECT *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From [SQL Portfolio Cleaning].dbo.NashvilleHousing

--order by ParcelID
)

-- (SELECT *
--FROM RowNumCTE
--WHERE row_num > 1
--ORDER BY PropertyAddress-- 104 duplicates

--DELETE
--FROM RowNumCTE
--WHERE row_num > 1

SELECT *
FROM RowNumCTE
WHERE row_num > 1;



-- Dropping Columns

ALTER TABLE [SQL Portfolio Cleaning].dbo.NashvilleHousing
DROP COLUMN OwnerAddress, PropertyAddress;

SELECT *
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;


-- SaleDate clean timestamp
SELECT SaleDate, CAST(SaleDate as DATE) as SalesDate
FROM [SQL Portfolio Cleaning].dbo.NashvilleHousing;


ALTER TABLE [SQL Portfolio Cleaning].dbo.NashvilleHousing
ADD SalesDate Nvarchar(255);

UPDATE [SQL Portfolio Cleaning].dbo.NashvilleHousing
SET SalesDate = CAST(SaleDate as DATE);


ALTER TABLE [SQL Portfolio Cleaning].dbo.NashvilleHousing
DROP COLUMN SaleDate;

